import numpy as np

# 解析输入数据为矩阵
data_lines = """
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
|  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |
|  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |
|  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |
|  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |
|   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |
|   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |
|   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |
|   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |   8 |   4 |   0 |   4 |   8 |  12 |  16 |  20 |  16 |  12 |
""".strip().split('\n')

# 提取数值到矩阵 (90行20列)
matrix = []
for line in data_lines:
    if line.startswith('|'):
        # 移除首尾的 | 和空格，分割并转换整数
        values = line.strip('|').split('|')
        values = [int(val.strip()) for val in values if val.strip()]
        matrix.append(values)
matrix = np.array(matrix)  # 现在 matrix 是 90x20 的 numpy 数组

# 检查矩阵形状
rows, cols = matrix.shape
print(f"Matrix shape: {rows} rows, {cols} columns")  # 应为 (90, 20)

# DP 初始化
n_rows = rows
n_cols = cols
max_s = n_cols - 2  # s 最大为 18 (因为 s+2 <=20)

# dp[i][s]: 到第 i 行,起始列 s 的最大总和 (i 从0开始索引, 对应行1)
dp = np.full((n_rows, max_s + 1), -np.inf)  # 初始化为负无穷
parent = np.zeros((n_rows, max_s + 1), dtype=int)  # 存储父状态: 0 表示来自 s, 1 表示来自 s-1

# 第0行 (i=0, 对应第1行) 初始化
s0 = 0  # s 索引从0开始 (s=1 对应索引0? 不, s 值从1到18, 索引0对应s=1)
# 但 Python 索引从0, 我们让 s_index = s-1, 所以 s=1 对应索引0, s=2 对应索引1, ..., s=18 对应索引17
# 定义: 对于行 i, s 值从1到18, 在数组中用索引 j = s-1

# 第0行: 只 s=1 有效
s_val = 1
j = s_val - 1
sum_val = matrix[0, j] + matrix[0, j+1] + matrix[0, j+2]
c = min(sum_val, 50)
dp[0, j] = c
# 父状态无, 设为 -1

# 迭代第1到89行 (i=1 to 89)
for i in range(1, n_rows):  # i 是行索引 (0-based)
    for s_val in range(1, max_s + 1):  # s_val 从1到18
        j = s_val - 1  # 数组索引
        # 计算 c_i(s_val)
        sum_val = matrix[i, j] + matrix[i, j+1] + matrix[i, j+2]
        c = min(sum_val, 50)
        
        # 转移: 来自前一行的 s 或 s-1
        prev_states = []
        # 选项1: 来自 s_val (列不变)
        prev_s1 = s_val
        j_prev1 = prev_s1 - 1
        if dp[i-1, j_prev1] > -np.inf:  # 状态有效
            prev_states.append( (dp[i-1, j_prev1], prev_s1, 0) )  # 0 表示来自 s_val
        
        # 选项2: 来自 s_val-1 (右移)
        if s_val > 1:  # s_val-1 至少为1
            prev_s2 = s_val - 1
            j_prev2 = prev_s2 - 1
            if dp[i-1, j_prev2] > -np.inf:
                prev_states.append( (dp[i-1, j_prev2], prev_s2, 1) )  # 1 表示来自 s_val-1
        
        if not prev_states:  # 无有效前驱
            continue
        
        # 选择最大累计值的前驱
        best_prev = max(prev_states, key=lambda x: x[0])
        dp[i, j] = c + best_prev[0]
        parent[i, j] = best_prev[2]  # 存储父类型: 0 或 1, 父 s 为 best_prev[1]
        # 注意: parent[i,j] 不直接存储 s, 而是存储转移类型

# 最后一行: 找最大总和
last_row = n_rows - 1
max_sum = -np.inf
best_s = -1
for s_val in range(1, max_s + 1):
    j = s_val - 1
    if dp[last_row, j] > max_sum:
        max_sum = dp[last_row, j]
        best_s = s_val

print(f"最大总和: {max_sum}")

# 回溯路径
path = [-1] * n_rows  # 存储每行的 s 值
# 最后一行
path[last_row] = best_s
j_best = best_s - 1
# 从最后一行回溯到第一行
for i in range(last_row, 0, -1):  # 从 last_row 到 1
    current_s = path[i]
    j = current_s - 1
    p_type = parent[i, j]  # 0: 来自 s, 1: 来自 s-1
    if p_type == 0:  # 来自 s
        prev_s = current_s
    elif p_type == 1:  # 来自 s-1
        prev_s = current_s - 1
    path[i-1] = prev_s  # 设置前一行的 s

# 第一行已固定
path[0] = 1  # 确保

# 输出路径
print("路径序列 (每行起始列 s):")
print(path)

# 验证路径是否有效
for i in range(1, n_rows):
    s_prev = path[i-1]
    s_curr = path[i]
    assert s_curr == s_prev or s_curr == s_prev + 1, f"无效移动: 行 {i} 从 {s_prev} 到 {s_curr}"

print("路径有效")